apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: springboot-template
  title: Spring Boot Service
  description: Create a simple microservice Spring Boot Java
  tags:
    - java
    - springboot
spec:
  owner: service@example.com
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - component_id
        - owner
        - java_package_name
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        java_package_name:
          title: Java Package Name
          type: string
          description: Name for the java package. eg (io.backstage.blah)
        kube_namespace:
          title: Kubernetes Namespace
          type: string
          description: Enter your kube namespace, *dont include Env name with namespace*
          ui:field: EntityNamePicker
        vault_role:
          title: Vault Role
          type: string
          description: Enter value for vault.hashicorp.com/role
          ui:field: EntityNamePicker
        vault_secret_folder_name:
          title: Vault Secret Folder Name
          type: string
          description: Enter value for vault.hashicorp.com/agent-inject-secret-secrets.properties, eg (Platform-Vault-Kubernetes)
          ui:field: EntityNamePicker
        vault_secret_file_name:
          title: Vault Secret File Name
          type: string
          description: Enter value for vault.hashicorp.com/agent-inject-secret-secrets.properties, *contact devops teams to create the same on vault*
          ui:field: EntityNamePicker
        aws_role:
          title: AWS Role
          type: string
          description: Enter value for iam.amazonaws.com/role
          ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - bitbucket.org

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          java_package_name: ${{ parameters.java_package_name }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          kube_namespace: ${{ parameters.kube_namespace }}
          vault_role: ${{ parameters.vault_role }}
          vault_secret_folder_name: ${{ parameters.vault_secret_folder_name }}
          vault_secret_file_name: ${{ parameters.vault_secret_file_name }}
          aws_role: ${{ parameters.aws_role }}
          http_port: 8080

    - id: publish
      name: Publish
      action: publish:bitbucket
      input:
        allowedHosts: ["bitbucket.org"]
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}